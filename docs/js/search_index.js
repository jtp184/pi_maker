var search_data = {"index":{"searchIndex":["pimaker","bootconfig","cli","command","commandgroup","diskmanagement","diskprotocol","flashingoperation","linux","macos","storagedevice","fileencrypter","instructions","networkidentifier","pantry","passkeyerror","recipe","remoterunner","systemcommanderror","wpaconfig","+()","[]()","[]()","[]()","[]=()","abbrev()","append()","append_files()","apt_packages()","build()","byte_convert()","call()","call()","call()","call()","clear()","command()","commands()","convert_mac_address()","copy_files()","create_temp_files()","create_temp_folder()","decrypt()","deep_hashify()","default_config()","default_login()","define()","define()","destroy_temp_folder()","dir_size()","disk_info()","disk_info()","dstruct()","dstruct()","editor_text()","eject()","eject_disk()","eject_disk()","encrypt()","encrypted?()","exec_exist?()","execute()","exists?()","exit_on_failure?()","extract_actionable_lines()","file_list()","file_present?()","finished?()","first_exec()","first_mounted()","first_mounted_path()","from_yaml()","from_yaml()","from_yaml()","gems()","generator()","github_repos()","global()","global_exists?()","host_os()","identify()","inspect()","key_from_password()","largest_partition()","list_blocks()","list_blocks()","list_devices()","load_recipes()","load_wifi_networks()","login_setup()","method_missing()","method_missing()","method_missing()","mount()","mount_disk()","mount_disk()","mount_fs()","mount_list()","mount_point_for()","mounted?()","mounted?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new_cipher()","pager()","parse_additional_setups()","parse_arp()","parse_boot_config_options()","parse_disk_plist_entry()","parse_diskinfo()","parse_file()","parse_initial_config_options()","parse_nmap()","parse_wifi_config_options()","pastel()","progressbar()","prompt()","protocol()","raspi_config()","raw_disk_path()","raw_disk_path()","raw_disk_path()","reload()","respond_to_missing?()","respond_to_missing?()","respond_to_missing?()","root_path()","run_commands()","run_text_blocks()","sd_card_device()","sd_card_path()","size()","spinner()","ssh_options()","ssid?()","start()","system_cmd()","text_blocks()","to_h()","to_h()","to_h()","to_h()","to_h()","to_rb()","to_s()","to_s()","to_s()","to_str()","to_yaml()","to_yaml()","to_yaml()","transform_diskinfo()","unmount()","unmount_disk()","unmount_disk()","valid_attribute?()","version()","which()","write()","write_image()","write_image()","code_of_conduct","license","readme"],"longSearchIndex":["pimaker","pimaker::bootconfig","pimaker::cli","pimaker::command","pimaker::commandgroup","pimaker::diskmanagement","pimaker::diskmanagement::diskprotocol","pimaker::diskmanagement::flashingoperation","pimaker::diskmanagement::linux","pimaker::diskmanagement::macos","pimaker::diskmanagement::storagedevice","pimaker::fileencrypter","pimaker::instructions","pimaker::networkidentifier","pimaker::pantry","pimaker::passkeyerror","pimaker::recipe","pimaker::remoterunner","pimaker::systemcommanderror","pimaker::wpaconfig","pimaker::instructions#+()","pimaker::bootconfig#[]()","pimaker::fileencrypter::[]()","pimaker::instructions#[]()","pimaker::bootconfig#[]=()","pimaker::command#abbrev()","pimaker::wpaconfig#append()","pimaker::remoterunner#append_files()","pimaker::commandgroup#apt_packages()","pimaker::wpaconfig#build()","pimaker::diskmanagement::macos::byte_convert()","pimaker::diskmanagement::flashingoperation#call()","pimaker::fileencrypter::call()","pimaker::networkidentifier::call()","pimaker::remoterunner#call()","pimaker::pantry#clear()","pimaker::command#command()","pimaker::commandgroup#commands()","pimaker::networkidentifier::convert_mac_address()","pimaker::remoterunner#copy_files()","pimaker::remoterunner#create_temp_files()","pimaker::remoterunner#create_temp_folder()","pimaker::fileencrypter::decrypt()","pimaker::bootconfig#deep_hashify()","pimaker::bootconfig#default_config()","pimaker::default_login()","pimaker::instructions::define()","pimaker::recipe::define()","pimaker::remoterunner#destroy_temp_folder()","pimaker::diskmanagement::diskprotocol::dir_size()","pimaker::diskmanagement::linux::disk_info()","pimaker::diskmanagement::macos::disk_info()","pimaker::diskmanagement::linux::dstruct()","pimaker::diskmanagement::macos::dstruct()","pimaker::command#editor_text()","pimaker::diskmanagement::storagedevice#eject()","pimaker::diskmanagement::linux::eject_disk()","pimaker::diskmanagement::macos::eject_disk()","pimaker::fileencrypter::encrypt()","pimaker::fileencrypter::encrypted?()","pimaker::command#exec_exist?()","pimaker::command#execute()","pimaker::pantry#exists?()","pimaker::cli::exit_on_failure?()","pimaker::bootconfig#extract_actionable_lines()","pimaker::pantry#file_list()","pimaker::pantry#file_present?()","pimaker::diskmanagement::flashingoperation#finished?()","pimaker::command#first_exec()","pimaker::diskmanagement::storagedevice#first_mounted()","pimaker::diskmanagement::storagedevice#first_mounted_path()","pimaker::bootconfig::from_yaml()","pimaker::recipe::from_yaml()","pimaker::wpaconfig::from_yaml()","pimaker::commandgroup#gems()","pimaker::command#generator()","pimaker::commandgroup#github_repos()","pimaker::pantry::global()","pimaker::pantry::global_exists?()","pimaker::host_os()","pimaker::cli#identify()","pimaker::diskmanagement::storagedevice#inspect()","pimaker::fileencrypter::key_from_password()","pimaker::diskmanagement::storagedevice#largest_partition()","pimaker::diskmanagement::linux::list_blocks()","pimaker::diskmanagement::macos::list_blocks()","pimaker::diskmanagement::diskprotocol::list_devices()","pimaker::pantry#load_recipes()","pimaker::pantry#load_wifi_networks()","pimaker::recipe#login_setup()","pimaker::bootconfig#method_missing()","pimaker::commandgroup#method_missing()","pimaker::diskmanagement::method_missing()","pimaker::diskmanagement::storagedevice#mount()","pimaker::diskmanagement::linux::mount_disk()","pimaker::diskmanagement::macos::mount_disk()","pimaker::diskmanagement::diskprotocol::mount_fs()","pimaker::diskmanagement::diskprotocol::mount_list()","pimaker::diskmanagement::diskprotocol::mount_point_for()","pimaker::diskmanagement::diskprotocol::mounted?()","pimaker::diskmanagement::storagedevice#mounted?()","pimaker::bootconfig::new()","pimaker::commandgroup::new()","pimaker::diskmanagement::flashingoperation::new()","pimaker::diskmanagement::storagedevice::new()","pimaker::instructions::new()","pimaker::pantry::new()","pimaker::recipe::new()","pimaker::remoterunner::new()","pimaker::wpaconfig::new()","pimaker::fileencrypter::new_cipher()","pimaker::command#pager()","pimaker::recipe#parse_additional_setups()","pimaker::networkidentifier::parse_arp()","pimaker::recipe#parse_boot_config_options()","pimaker::diskmanagement::macos::parse_disk_plist_entry()","pimaker::diskmanagement::macos::parse_diskinfo()","pimaker::bootconfig#parse_file()","pimaker::recipe#parse_initial_config_options()","pimaker::networkidentifier::parse_nmap()","pimaker::recipe#parse_wifi_config_options()","pimaker::command#pastel()","pimaker::command#progressbar()","pimaker::command#prompt()","pimaker::diskmanagement::protocol()","pimaker::commandgroup#raspi_config()","pimaker::diskmanagement::linux::raw_disk_path()","pimaker::diskmanagement::macos::raw_disk_path()","pimaker::diskmanagement::storagedevice#raw_disk_path()","pimaker::pantry#reload()","pimaker::bootconfig#respond_to_missing?()","pimaker::commandgroup#respond_to_missing?()","pimaker::diskmanagement::respond_to_missing?()","pimaker::pantry#root_path()","pimaker::remoterunner#run_commands()","pimaker::remoterunner#run_text_blocks()","pimaker::diskmanagement::diskprotocol::sd_card_device()","pimaker::sd_card_path()","pimaker::diskmanagement::storagedevice#size()","pimaker::command#spinner()","pimaker::remoterunner#ssh_options()","pimaker::wpaconfig#ssid?()","pimaker::diskmanagement::flashingoperation::start()","pimaker::system_cmd()","pimaker::commandgroup#text_blocks()","pimaker::bootconfig#to_h()","pimaker::diskmanagement::storagedevice#to_h()","pimaker::instructions#to_h()","pimaker::recipe#to_h()","pimaker::wpaconfig#to_h()","pimaker::recipe#to_rb()","pimaker::bootconfig#to_s()","pimaker::diskmanagement::storagedevice#to_s()","pimaker::wpaconfig#to_s()","pimaker::wpaconfig#to_str()","pimaker::bootconfig#to_yaml()","pimaker::recipe#to_yaml()","pimaker::wpaconfig#to_yaml()","pimaker::diskmanagement::macos::transform_diskinfo()","pimaker::diskmanagement::storagedevice#unmount()","pimaker::diskmanagement::linux::unmount_disk()","pimaker::diskmanagement::macos::unmount_disk()","pimaker::instructions#valid_attribute?()","pimaker::cli#version()","pimaker::command#which()","pimaker::pantry#write()","pimaker::diskmanagement::diskprotocol::write_image()","pimaker::diskmanagement::storagedevice#write_image()","","",""],"info":[["PiMaker","","PiMaker.html","","<p>Easy bake Raspberry Pi\n"],["PiMaker::BootConfig","","PiMaker/BootConfig.html","","<p>Wrapper for the config.txt file on the boot volume\n"],["PiMaker::CLI","","PiMaker/CLI.html","","<p>Handle the application command line parsing and the dispatch to various command objects\n<p>@api public\n"],["PiMaker::Command","","PiMaker/Command.html","","<p>CLI Command runner\n"],["PiMaker::CommandGroup","","PiMaker/CommandGroup.html","","<p>Generate the actual shell commands from a Instructions\n"],["PiMaker::DiskManagement","","PiMaker/DiskManagement.html","","<p>Encloses functionality to manage connected devices\n"],["PiMaker::DiskManagement::DiskProtocol","","PiMaker/DiskManagement/DiskProtocol.html","","<p>Abstract class for acquiring disks and disk information.\n"],["PiMaker::DiskManagement::FlashingOperation","","PiMaker/DiskManagement/FlashingOperation.html","","<p>Wraps a pipe running dd to write the image to the SD card\n"],["PiMaker::DiskManagement::Linux","","PiMaker/DiskManagement/Linux.html","","<p>The disk protocol class for linux systems like Raspi\n"],["PiMaker::DiskManagement::MacOs","","PiMaker/DiskManagement/MacOs.html","","<p>The disk protocol for Mac devices\n"],["PiMaker::DiskManagement::StorageDevice","","PiMaker/DiskManagement/StorageDevice.html","","<p>Represents an attached filesystem\n"],["PiMaker::FileEncrypter","","PiMaker/FileEncrypter.html","","<p>Encrypt and decrypt files using openssl\n"],["PiMaker::Instructions","","PiMaker/Instructions.html","","<p>Set options for what to install / run\n"],["PiMaker::NetworkIdentifier","","PiMaker/NetworkIdentifier.html","","<p>Locate a pi on the network\n"],["PiMaker::Pantry","","PiMaker/Pantry.html","","<p>Stores recipes and wifi networks together in a securable bundle\n"],["PiMaker::PasskeyError","","PiMaker/PasskeyError.html","","<p>When an issue with encryption occurs\n"],["PiMaker::Recipe","","PiMaker/Recipe.html","","<p>Define a pi and its dependencies and config options\n"],["PiMaker::RemoteRunner","","PiMaker/RemoteRunner.html","","<p>Runs commands on a remote device\n"],["PiMaker::SystemCommandError","","PiMaker/SystemCommandError.html","","<p>Failed system commands\n"],["PiMaker::WpaConfig","","PiMaker/WpaConfig.html","","<p>Captures multiple wifi network setups and the country code, generates the file via its to_s method\n"],["+","PiMaker::Instructions","PiMaker/Instructions.html#method-i-2B","(other)","<p>Combine the subvalues of self and <code>other</code> to make new instructions\n"],["[]","PiMaker::BootConfig","PiMaker/BootConfig.html#method-i-5B-5D","(key)","<p>Get the <code>key</code> from the config, defaulting to all if it isn&#39;t a filter\n"],["[]","PiMaker::FileEncrypter","PiMaker/FileEncrypter.html#method-c-5B-5D","(str, passwd)",""],["[]","PiMaker::Instructions","PiMaker/Instructions.html#method-i-5B-5D","(field)","<p>If the <code>field</code> is valid, get its value\n"],["[]=","PiMaker::BootConfig","PiMaker/BootConfig.html#method-i-5B-5D-3D","(key, value)","<p>Set the <code>key</code> to the <code>value</code>, defaulting to all if it isn&#39;t a filter\n"],["abbrev","PiMaker::Command","PiMaker/Command.html#method-i-abbrev","(val, key = nil)","<p>Unambiguously abbreviate values\n"],["append","PiMaker::WpaConfig","PiMaker/WpaConfig.html#method-i-append","(id, passwd)","<p>Given a new <code>id</code> and <code>passwd</code>, adds a new credential\n"],["append_files","PiMaker::RemoteRunner","PiMaker/RemoteRunner.html#method-i-append_files","(append_opts, &watcher)","<p>Given a timestamp and tempname hash <code>append_opts</code>, appends the contents of the tempfiles\n"],["apt_packages","PiMaker::CommandGroup","PiMaker/CommandGroup.html#method-i-apt_packages","()","<p>Construct an apt-get install string from the packages\n"],["build","PiMaker::WpaConfig","PiMaker/WpaConfig.html#method-i-build","()","<p>Adds together the preamble and country code to the networks to make the completed file contents string …\n"],["byte_convert","PiMaker::DiskManagement::MacOs","PiMaker/DiskManagement/MacOs.html#method-c-byte_convert","(bstr)","<p>Takes in a string estimation of size in GB/MB and converts it to single byte representation\n"],["call","PiMaker::DiskManagement::FlashingOperation","PiMaker/DiskManagement/FlashingOperation.html#method-i-call","()","<p>Creates pipe running dd and returns the instance with the pipe running\n"],["call","PiMaker::FileEncrypter","PiMaker/FileEncrypter.html#method-c-call","(str, passwd)","<p>Given a <code>str</code> and a <code>passwd</code>, decides whether to encrypt or decrypt based on utf8\n"],["call","PiMaker::NetworkIdentifier","PiMaker/NetworkIdentifier.html#method-c-call","(opts = {})","<p>Takes in <code>opts</code> for :scan_with, and optional overrides for run, parse, and filter with. returns an array …\n"],["call","PiMaker::RemoteRunner","PiMaker/RemoteRunner.html#method-i-call","(&watcher)","<p>Clears the result array, then runs run_commands and run_text_blocks\n"],["clear","PiMaker::Pantry","PiMaker/Pantry.html#method-i-clear","()","<p>Empties recipes and wifi networks\n"],["command","PiMaker::Command","PiMaker/Command.html#method-i-command","(options = {})","<p>The external commands runner\n"],["commands","PiMaker::CommandGroup","PiMaker/CommandGroup.html#method-i-commands","()","<p>Generate commands from the different instructions collections\n"],["convert_mac_address","PiMaker::NetworkIdentifier","PiMaker/NetworkIdentifier.html#method-c-convert_mac_address","(mac_addr)","<p>Converts a mac address into an array of hex couplets\n"],["copy_files","PiMaker::RemoteRunner","PiMaker/RemoteRunner.html#method-i-copy_files","(&watcher)","<p>Vopies the sources from copy_files to destination paths\n"],["create_temp_files","PiMaker::RemoteRunner","PiMaker/RemoteRunner.html#method-i-create_temp_files","(append_opts)","<p>Given a timestamp and tempname hash <code>append_opts</code>, writes the text_block lines out to it\n"],["create_temp_folder","PiMaker::RemoteRunner","PiMaker/RemoteRunner.html#method-i-create_temp_folder","(append_opts)","<p>Given a timestamp as the first <code>append_opts</code>, creates the temp folder in /tmp/\n"],["decrypt","PiMaker::FileEncrypter","PiMaker/FileEncrypter.html#method-c-decrypt","(str, passwd = nil)","<p>Given the +str to decrypt, and a <code>passwd</code> to decrypt it with, returns the original string. Raises a PasskeyError …\n"],["deep_hashify","PiMaker::BootConfig","PiMaker/BootConfig.html#method-i-deep_hashify","(node = config)","<p>Given the starting <code>note</code>, recursively transforms the subvalues to hashes\n"],["default_config","PiMaker::BootConfig","PiMaker/BootConfig.html#method-i-default_config","()","<p>The default options\n"],["default_login","PiMaker","PiMaker.html#method-c-default_login","()","<p>The default login credentials\n"],["define","PiMaker::Instructions","PiMaker/Instructions.html#method-c-define","(hsh = {})","<p>Yield to a block, or directly use the <code>hsh</code> to create a new instance\n"],["define","PiMaker::Recipe","PiMaker/Recipe.html#method-c-define","(hsh = {})","<p>Yield to a block, or directly use the <code>hsh</code> to create a new instance\n"],["destroy_temp_folder","PiMaker::RemoteRunner","PiMaker/RemoteRunner.html#method-i-destroy_temp_folder","(append_opts)","<p>Given a timestamp as the first <code>append_opts</code>, destroys the temp folder in /tmp/\n"],["dir_size","PiMaker::DiskManagement::DiskProtocol","PiMaker/DiskManagement/DiskProtocol.html#method-c-dir_size","(path)","<p>Gets the size of the entire directory using `du`\n"],["disk_info","PiMaker::DiskManagement::Linux","PiMaker/DiskManagement/Linux.html#method-c-disk_info","(dev_path)","<p>Gets maximal info for disk at <code>dev_path</code> from lsblk\n"],["disk_info","PiMaker::DiskManagement::MacOs","PiMaker/DiskManagement/MacOs.html#method-c-disk_info","(dev_path)","<p>Gets maximal info for disk at <code>dev_path</code> using diskutil info\n"],["dstruct","PiMaker::DiskManagement::Linux","PiMaker/DiskManagement/Linux.html#method-c-dstruct","(subhsh)","<p>Takes in a <code>subhsh</code> from lksblk&#39;s json result and turns it into a DiskProtocol::Disk\n"],["dstruct","PiMaker::DiskManagement::MacOs","PiMaker/DiskManagement/MacOs.html#method-c-dstruct","(plist, pathset)","<p>Turns the passed plist <code>pl</code> and path/removability matrix <code>pathset</code> to create Disks\n"],["editor_text","PiMaker::Command","PiMaker/Command.html#method-i-editor_text","(txt = '')","<p>Open a file or text in the user&#39;s preferred editor\n"],["eject","PiMaker::DiskManagement::StorageDevice","PiMaker/DiskManagement/StorageDevice.html#method-i-eject","()","<p>Ejects this device if mounted\n"],["eject_disk","PiMaker::DiskManagement::Linux","PiMaker/DiskManagement/Linux.html#method-c-eject_disk","(dsk)","<p>Prepare the disk <code>dsk</code> to be removed from the computer\n"],["eject_disk","PiMaker::DiskManagement::MacOs","PiMaker/DiskManagement/MacOs.html#method-c-eject_disk","(dsk)","<p>Prepare the disk <code>dsk</code> to be removed from the computer\n"],["encrypt","PiMaker::FileEncrypter","PiMaker/FileEncrypter.html#method-c-encrypt","(str, passwd = nil)","<p>Given the <code>str</code> to encrypt, and an optional passwd to encrypt it with, returns an encoded string, or the …\n"],["encrypted?","PiMaker::FileEncrypter","PiMaker/FileEncrypter.html#method-c-encrypted-3F","(str)","<p>Returns true for strings that have the HEADER in the right location\n"],["exec_exist?","PiMaker::Command","PiMaker/Command.html#method-i-exec_exist-3F","(*args)","<p>Check if executable exists\n"],["execute","PiMaker::Command","PiMaker/Command.html#method-i-execute","(*)","<p>Execute this command\n"],["exists?","PiMaker::Pantry","PiMaker/Pantry.html#method-i-exists-3F","()","<p>Checks that this has been written to by checking the recipes subfolder\n"],["exit_on_failure?","PiMaker::CLI","PiMaker/CLI.html#method-c-exit_on_failure-3F","()","<p>Returns proper exit code\n"],["extract_actionable_lines","PiMaker::BootConfig","PiMaker/BootConfig.html#method-i-extract_actionable_lines","(file_contents)","<p>Extracts non empty and non comment lines from <code>file_contents</code>\n"],["file_list","PiMaker::Pantry","PiMaker/Pantry.html#method-i-file_list","(path = root_path)","<p>Returns Dir.[] for the <code>path</code>\n"],["file_present?","PiMaker::Pantry","PiMaker/Pantry.html#method-i-file_present-3F","(file, path = root_path)","<p>Checks the file_list with optional <code>path</code> and checks if any matches regex <code>file</code>\n"],["finished?","PiMaker::DiskManagement::FlashingOperation","PiMaker/DiskManagement/FlashingOperation.html#method-i-finished-3F","()","<p>Returns true once the pipe is ready for reading, which indicates completeness\n"],["first_exec","PiMaker::Command","PiMaker/Command.html#method-i-first_exec","(*args)","<p>Detect if any of these executables exist\n"],["first_mounted","PiMaker::DiskManagement::StorageDevice","PiMaker/DiskManagement/StorageDevice.html#method-i-first_mounted","()","<p>Returns the mount point, or partition mount point\n"],["first_mounted_path","PiMaker::DiskManagement::StorageDevice","PiMaker/DiskManagement/StorageDevice.html#method-i-first_mounted_path","()","<p>Returns this mounted path if there is one, otherwise finds the first mounted partition\n"],["from_yaml","PiMaker::BootConfig","PiMaker/BootConfig.html#method-c-from_yaml","(yml, encrypted = nil)","<p>Parse the <code>yml</code> string and create a new instance from it\n"],["from_yaml","PiMaker::Recipe","PiMaker/Recipe.html#method-c-from_yaml","(yml, encrypted = nil)","<p>Takes in the <code>yml</code> string, loads the options from it and returns a new instance\n"],["from_yaml","PiMaker::WpaConfig","PiMaker/WpaConfig.html#method-c-from_yaml","(yml, encrypted = nil)","<p>Parse the <code>yml</code> string and create a new instance from it\n"],["gems","PiMaker::CommandGroup","PiMaker/CommandGroup.html#method-i-gems","()","<p>Construct a gem install string from the gems\n"],["generator","PiMaker::Command","PiMaker/Command.html#method-i-generator","()","<p>File manipulation utility methods\n"],["github_repos","PiMaker::CommandGroup","PiMaker/CommandGroup.html#method-i-github_repos","()","<p>Construct an array of git clone strings from the repos\n"],["global","PiMaker::Pantry","PiMaker/Pantry.html#method-c-global","(opts = {})","<p>If we can locate a global pantry, loads it. Override with <code>opts</code>\n"],["global_exists?","PiMaker::Pantry","PiMaker/Pantry.html#method-c-global_exists-3F","()","<p>Return nil if we can&#39;t find a dotfile, or the containing directory\n"],["host_os","PiMaker","PiMaker.html#method-c-host_os","()","<p>Returns a symbol corresponding to the operating system\n"],["identify","PiMaker::CLI","PiMaker/CLI.html#method-i-identify","(*)","<p>Identify pis on the network\n"],["inspect","PiMaker::DiskManagement::StorageDevice","PiMaker/DiskManagement/StorageDevice.html#method-i-inspect","()","<p>Return a view of the path, mount status, and capacity\n"],["key_from_password","PiMaker::FileEncrypter","PiMaker/FileEncrypter.html#method-c-key_from_password","(passwd)","<p>Given the <code>passwd</code>, converts it into a 16 byte key using OpenSSL::KDF.pbkdf2_hmac\n"],["largest_partition","PiMaker::DiskManagement::StorageDevice","PiMaker/DiskManagement/StorageDevice.html#method-i-largest_partition","()","<p>Gets the partition which is largest by capacity\n"],["list_blocks","PiMaker::DiskManagement::Linux","PiMaker/DiskManagement/Linux.html#method-c-list_blocks","()","<p>Gets all attached disks, turns them into DiskProtocol::Disk objects, and returns\n"],["list_blocks","PiMaker::DiskManagement::MacOs","PiMaker/DiskManagement/MacOs.html#method-c-list_blocks","()","<p>Gets all attached disks, turns them into DiskProtocol::Disk objects\n"],["list_devices","PiMaker::DiskManagement::DiskProtocol","PiMaker/DiskManagement/DiskProtocol.html#method-c-list_devices","()","<p>Converts listed disks into StorageDevice objects\n"],["load_recipes","PiMaker::Pantry","PiMaker/Pantry.html#method-i-load_recipes","()","<p>Finds and interprets and recipes files in the recipes subdirectory\n"],["load_wifi_networks","PiMaker::Pantry","PiMaker/Pantry.html#method-i-load_wifi_networks","()","<p>Finds and interprets a wifi config file in the base path\n"],["login_setup","PiMaker::Recipe","PiMaker/Recipe.html#method-i-login_setup","(old_password = PiMaker.default_login[:password])","<p>Returns an Instructions list to set the hostname and password on the pi\n"],["method_missing","PiMaker::BootConfig","PiMaker/BootConfig.html#method-i-method_missing","(mtd_name, *args, &block)","<p>Pass the <code>mtd_name</code> as a subargument of all if missing\n"],["method_missing","PiMaker::CommandGroup","PiMaker/CommandGroup.html#method-i-method_missing","(method_name, *args, &blk)","<p>Use the <code>method_name</code> on the instructions\n"],["method_missing","PiMaker::DiskManagement","PiMaker/DiskManagement.html#method-c-method_missing","(mtd_name, *args)","<p>Pass any calls through to the protocol object\n"],["mount","PiMaker::DiskManagement::StorageDevice","PiMaker/DiskManagement/StorageDevice.html#method-i-mount","()","<p>Mounts the device if it isn&#39;t already\n"],["mount_disk","PiMaker::DiskManagement::Linux","PiMaker/DiskManagement/Linux.html#method-c-mount_disk","(dsk, mountp = nil)","<p>Uses the mount command to mount disk <code>dsk</code>, with mount point <code>mp</code>\n"],["mount_disk","PiMaker::DiskManagement::MacOs","PiMaker/DiskManagement/MacOs.html#method-c-mount_disk","(dsk, _mountp = nil)","<p>Mounts the disk <code>dsk</code>, ignoring the <code>_mp</code> arg since Mac has default mounting paths under /Volumes\n"],["mount_fs","PiMaker::DiskManagement::DiskProtocol","PiMaker/DiskManagement/DiskProtocol.html#method-c-mount_fs","(dev_path)","<p>Scans the mount_list result for <code>dev_path</code> and returns the filesystem type\n"],["mount_list","PiMaker::DiskManagement::DiskProtocol","PiMaker/DiskManagement/DiskProtocol.html#method-c-mount_list","()","<p>Uses the system mount command to identify mounted devices\n"],["mount_point_for","PiMaker::DiskManagement::DiskProtocol","PiMaker/DiskManagement/DiskProtocol.html#method-c-mount_point_for","(dev_path)","<p>Scans the mount_list result for <code>dev_path</code> and returns the path if it is mounted\n"],["mounted?","PiMaker::DiskManagement::DiskProtocol","PiMaker/DiskManagement/DiskProtocol.html#method-c-mounted-3F","(dev_path)","<p>True if a mount_list result is found for <code>dev_path</code>\n"],["mounted?","PiMaker::DiskManagement::StorageDevice","PiMaker/DiskManagement/StorageDevice.html#method-i-mounted-3F","()","<p>Predicate method to return true if first_mounted exists\n"],["new","PiMaker::BootConfig","PiMaker/BootConfig.html#method-c-new","(opts = {})","<p>Takes in <code>opts</code> for the config and path\n"],["new","PiMaker::CommandGroup","PiMaker/CommandGroup.html#method-c-new","(inst)","<p>Take <code>inst</code> in to capture the instructions\n"],["new","PiMaker::DiskManagement::FlashingOperation","PiMaker/DiskManagement/FlashingOperation.html#method-c-new","(opts = {})","<p>Takes in <code>opts</code> for image_path and disk\n"],["new","PiMaker::DiskManagement::StorageDevice","PiMaker/DiskManagement/StorageDevice.html#method-c-new","(opts = {})","<p>Takes in <code>opts</code> for either the attributes, or a single :disk attribute to set them all\n"],["new","PiMaker::Instructions","PiMaker/Instructions.html#method-c-new","(opts = {})","<p>Use the <code>opts</code> hash to populate instance vars\n"],["new","PiMaker::Pantry","PiMaker/Pantry.html#method-c-new","(opts = {})","<p>Takes in <code>opts</code> for the <code>base_path</code> and an optional <code>password</code>\n"],["new","PiMaker::Recipe","PiMaker/Recipe.html#method-c-new","(opts = {})","<p>Takes in <code>opts</code> for the attributes\n"],["new","PiMaker::RemoteRunner","PiMaker/RemoteRunner.html#method-c-new","(opts = {})","<p>Uses <code>opts</code> to set the config and command group\n"],["new","PiMaker::WpaConfig","PiMaker/WpaConfig.html#method-c-new","(opts = {})","<p>Take in <code>opts</code> for networks and country_code\n"],["new_cipher","PiMaker::FileEncrypter","PiMaker/FileEncrypter.html#method-c-new_cipher","()","<p>Set the instanced cipher to a new instance\n"],["pager","PiMaker::Command","PiMaker/Command.html#method-i-pager","(options = {})","<p>Terminal output paging\n"],["parse_additional_setups","PiMaker::Recipe","PiMaker/Recipe.html#method-i-parse_additional_setups","(opts)","<p>Parses any additional setup options provided\n"],["parse_arp","PiMaker::NetworkIdentifier","PiMaker/NetworkIdentifier.html#method-c-parse_arp","(hosts)","<p>Parses the <code>hosts</code> from arp into ScanResult objects\n"],["parse_boot_config_options","PiMaker::Recipe","PiMaker/Recipe.html#method-i-parse_boot_config_options","(opts)","<p>Parses the boot config options\n"],["parse_disk_plist_entry","PiMaker::DiskManagement::MacOs","PiMaker/DiskManagement/MacOs.html#method-c-parse_disk_plist_entry","(plist)","<p>Converts an individual entry from the plist <code>pl</code> into a hash of Disk options\n"],["parse_diskinfo","PiMaker::DiskManagement::MacOs","PiMaker/DiskManagement/MacOs.html#method-c-parse_diskinfo","(dinfo)","<p>Parse returned table from diskutil info <code>dinfo</code>\n"],["parse_file","PiMaker::BootConfig","PiMaker/BootConfig.html#method-i-parse_file","(file_contents)","<p>Takes the <code>file_contents</code> and interprets them\n"],["parse_initial_config_options","PiMaker::Recipe","PiMaker/Recipe.html#method-i-parse_initial_config_options","(opts)","<p>Parses the initial config options\n"],["parse_nmap","PiMaker::NetworkIdentifier","PiMaker/NetworkIdentifier.html#method-c-parse_nmap","(nmap)","<p>Parses the text from <code>nmap</code> into ScanResult objects\n"],["parse_wifi_config_options","PiMaker::Recipe","PiMaker/Recipe.html#method-i-parse_wifi_config_options","(opts)","<p>Parses the wifi config options\n"],["pastel","PiMaker::Command","PiMaker/Command.html#method-i-pastel","(options = {})","<p>Colorization for output\n"],["progressbar","PiMaker::Command","PiMaker/Command.html#method-i-progressbar","(*args)","<p>Linear progress bars\n"],["prompt","PiMaker::Command","PiMaker/Command.html#method-i-prompt","(options = {})","<p>The interactive prompt\n"],["protocol","PiMaker::DiskManagement","PiMaker/DiskManagement.html#method-c-protocol","()","<p>Returns the platform specific DiskProtocol in use\n"],["raspi_config","PiMaker::CommandGroup","PiMaker/CommandGroup.html#method-i-raspi_config","()","<p>Use the raspi-config tool on the pi for these options\n"],["raw_disk_path","PiMaker::DiskManagement::Linux","PiMaker/DiskManagement/Linux.html#method-c-raw_disk_path","(dsk)","<p>Same dev and raw path on linux\n"],["raw_disk_path","PiMaker::DiskManagement::MacOs","PiMaker/DiskManagement/MacOs.html#method-c-raw_disk_path","(dsk)","<p>Prepends the <code>dev_path</code> with &#39;r&#39;\n"],["raw_disk_path","PiMaker::DiskManagement::StorageDevice","PiMaker/DiskManagement/StorageDevice.html#method-i-raw_disk_path","()","<p>Get a raw disk path for the disk\n"],["reload","PiMaker::Pantry","PiMaker/Pantry.html#method-i-reload","()","<p>Loads recipes and wifi networks from their paths\n"],["respond_to_missing?","PiMaker::BootConfig","PiMaker/BootConfig.html#method-i-respond_to_missing-3F","(mtd_name, priv = false)","<p>Responds to <code>mtd_name</code> and returns whether we have a key already for all\n"],["respond_to_missing?","PiMaker::CommandGroup","PiMaker/CommandGroup.html#method-i-respond_to_missing-3F","(method_name, priv)","<p>Respond to the <code>method_name</code> on the instructions\n"],["respond_to_missing?","PiMaker::DiskManagement","PiMaker/DiskManagement.html#method-c-respond_to_missing-3F","(mtd, priv = false)","<p>Respond to protocol messages\n"],["root_path","PiMaker::Pantry","PiMaker/Pantry.html#method-i-root_path","(*joins)","<p>Returns a Pathname of the base path with optional subdirectories as <code>joins</code>\n"],["run_commands","PiMaker::RemoteRunner","PiMaker/RemoteRunner.html#method-i-run_commands","(&watcher)","<p>For each command in the CommandGroup, ssh into the remote and run the command\n"],["run_text_blocks","PiMaker::RemoteRunner","PiMaker/RemoteRunner.html#method-i-run_text_blocks","(&watcher)","<p>Creates a temp folder, then for each text_block in the CommandGroup, creates a tempfile for it, then …\n"],["sd_card_device","PiMaker::DiskManagement::DiskProtocol","PiMaker/DiskManagement/DiskProtocol.html#method-c-sd_card_device","()","<p>Returns the device which matches the mount path defined in PiMaker.sd_card_path\n"],["sd_card_path","PiMaker","PiMaker.html#method-c-sd_card_path","()","<p>Default location for the config file\n"],["size","PiMaker::DiskManagement::StorageDevice","PiMaker/DiskManagement/StorageDevice.html#method-i-size","(round_to = 4)","<p>Returns a string representation with digits to <code>round_to</code>\n"],["spinner","PiMaker::Command","PiMaker/Command.html#method-i-spinner","(*args)","<p>Non-deterministic waiting prompt\n"],["ssh_options","PiMaker::RemoteRunner","PiMaker/RemoteRunner.html#method-i-ssh_options","()","<p>Arguments for an SSH invocation\n"],["ssid?","PiMaker::WpaConfig","PiMaker/WpaConfig.html#method-i-ssid-3F","(id)","<p>Returns true if we have an entry for <code>id</code>\n"],["start","PiMaker::DiskManagement::FlashingOperation","PiMaker/DiskManagement/FlashingOperation.html#method-c-start","(opts = {})","<p>Creates a new instance and runs #call on it\n"],["system_cmd","PiMaker","PiMaker.html#method-c-system_cmd","(opts = {})","<p>Runs a command on the system, with some helpful <code>opts</code>\n"],["text_blocks","PiMaker::CommandGroup","PiMaker/CommandGroup.html#method-i-text_blocks","()","<p>Build text blocks to be copied and appended to files\n"],["to_h","PiMaker::BootConfig","PiMaker/BootConfig.html#method-i-to_h","()","<p>Return a hash representation\n"],["to_h","PiMaker::DiskManagement::StorageDevice","PiMaker/DiskManagement/StorageDevice.html#method-i-to_h","()","<p>Convert everything to hash format, including recursing the partitions\n"],["to_h","PiMaker::Instructions","PiMaker/Instructions.html#method-i-to_h","()","<p>Convert to a hash representation by map reducing the keys\n"],["to_h","PiMaker::Recipe","PiMaker/Recipe.html#method-i-to_h","(opts = {})","<p>Takes in <code>opts</code> for whether to export :with_passwords, and returns a hash representation\n"],["to_h","PiMaker::WpaConfig","PiMaker/WpaConfig.html#method-i-to_h","(with_passwords = false)","<p>Returns a hash representation, optionally <code>with_passwords</code>\n"],["to_rb","PiMaker::Recipe","PiMaker/Recipe.html#method-i-to_rb","()",""],["to_s","PiMaker::BootConfig","PiMaker/BootConfig.html#method-i-to_s","()","<p>Output all config options as a stream of k=v\n"],["to_s","PiMaker::DiskManagement::StorageDevice","PiMaker/DiskManagement/StorageDevice.html#method-i-to_s","()","<p>Returns the dev path for munging\n"],["to_s","PiMaker::WpaConfig","PiMaker/WpaConfig.html#method-i-to_s","()","<p>Runs the build method and returns the result\n"],["to_str","PiMaker::WpaConfig","PiMaker/WpaConfig.html#method-i-to_str","()",""],["to_yaml","PiMaker::BootConfig","PiMaker/BootConfig.html#method-i-to_yaml","(password = nil)","<p>Dump the hash representation, taking in an optional <code>password</code> to encrypt with\n"],["to_yaml","PiMaker::Recipe","PiMaker/Recipe.html#method-i-to_yaml","(passwd = nil, opts = {})","<p>Dumps the hash to YAML, taking in <code>opts</code> to pass to to_h, and an optional encryption <code>passwd</code>\n"],["to_yaml","PiMaker::WpaConfig","PiMaker/WpaConfig.html#method-i-to_yaml","(password = nil)","<p>Export a YAML representation of the class\n"],["transform_diskinfo","PiMaker::DiskManagement::MacOs","PiMaker/DiskManagement/MacOs.html#method-c-transform_diskinfo","(dinfo)","<p>Applies transformations to diskinfo\n"],["unmount","PiMaker::DiskManagement::StorageDevice","PiMaker/DiskManagement/StorageDevice.html#method-i-unmount","()","<p>Unmounts this device if mounted\n"],["unmount_disk","PiMaker::DiskManagement::Linux","PiMaker/DiskManagement/Linux.html#method-c-unmount_disk","(dsk)","<p>Unmounts the disk at path <code>dsk</code>\n"],["unmount_disk","PiMaker::DiskManagement::MacOs","PiMaker/DiskManagement/MacOs.html#method-c-unmount_disk","(dsk)","<p>Unmounts the disk at <code>dsk</code>\n"],["valid_attribute?","PiMaker::Instructions","PiMaker/Instructions.html#method-i-valid_attribute-3F","(key)","<p>Returns true if the <code>key</code> is one of the LISTS or TEXT_BLOCKS keys\n"],["version","PiMaker::CLI","PiMaker/CLI.html#method-i-version","()","<p>Return version number\n"],["which","PiMaker::Command","PiMaker/Command.html#method-i-which","(*args)","<p>The unix which utility\n"],["write","PiMaker::Pantry","PiMaker/Pantry.html#method-i-write","(opts = {})","<p>Given an optional <code>where_path</code> to save to, saves out the recipes and wifi config to the folder\n"],["write_image","PiMaker::DiskManagement::DiskProtocol","PiMaker/DiskManagement/DiskProtocol.html#method-c-write_image","(img_path, dsk)","<p>Given an image <code>img_path</code>, writes the image to the disk <code>dsk</code>\n"],["write_image","PiMaker::DiskManagement::StorageDevice","PiMaker/DiskManagement/StorageDevice.html#method-i-write_image","(img_path)","<p>Given an image <code>img_path</code>, writes the image to the disk of this StorageDevice\n"],["CODE_OF_CONDUCT","","CODE_OF_CONDUCT_md.html","","<p>Contributor Covenant Code of Conduct\n<p>Our Pledge\n<p>In the interest of fostering an open and welcoming environment, …\n"],["LICENSE","","LICENSE_txt.html","","<p>The MIT License (MIT)\n<p>Copyright © 2021 Justin Piotroski\n<p>Permission is hereby granted, free of charge, …\n"],["README","","README_md.html","","<p>PiMaker\n<p>PiMaker is a CLI configurator for Raspberry Pi devices. I created this gem to rapidly prototype …\n"]]}}